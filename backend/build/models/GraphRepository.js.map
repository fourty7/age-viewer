{"version":3,"file":"GraphRepository.js","names":["_Pg","_interopRequireDefault","require","_pg","_pgTypes","_AGEParser","_SQLFlavorManager","GraphRepository","_ref","arguments","length","undefined","host","port","database","graph","user","password","_ref$graphs","graphs","server","ssl","_classCallCheck2","_host","_port","_database","_server_version","_graphs","_graph","_user","_password","_ssl","_createClass2","key","value","_connect","_asyncToGenerator2","_regenerator","mark","_callee","client","_yield$onConnectQueri","v","wrap","_context","prev","next","_pool","newConnectionPool","getPoolConnectionInfo","connect","sent","onConnectQueries","server_version","abrupt","stop","apply","_execute","_callee2","query","params","result","_args2","_t","_context2","getConnection","release","finish","execute","_x","_createTransaction","_callee4","_context4","_ref2","_callee3","_args3","_t2","_t3","_context3","_x2","createTransaction","_initGraphNames","_callee5","_yield$this$execute","rows","_context5","getQuery","map","item","name","setCurrentGraph","initGraphNames","_getConnection","_callee6","_context6","setAGETypes","types","_releaseConnection","_callee7","_t4","_context7","end","releaseConnection","config","version","max","PgConfig","idleTimeoutMillis","connectionTimeoutMillis","getConnectionInfo","Error","poolConnectionConfig","pg","Pool","module","exports"],"sources":["../../src/models/GraphRepository.js"],"sourcesContent":["/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport PgConfig from '../config/Pg'\n\nimport pg from 'pg';\nimport types from 'pg-types';\nimport {setAGETypes, onConnectQueries} from '../tools/AGEParser';\nimport { getQuery } from '../tools/SQLFlavorManager';\n\n\nclass GraphRepository {\n    constructor({host, port, database, graph, user, password, graphs=[], server, ssl} = {}) {\n        this._host = host;\n        this._port = port;\n        this._database = database;\n        this._server_version = server;\n        this._graphs = graphs;\n        this._graph = graph;\n        this._user = user;\n        this._password = password;\n        this._ssl = ssl;\n    }\n    /*\n    static async getConnection({\n                                   host,\n                                   port,\n                                   database,\n                                   user,\n                                   password,\n                               } = {},\n                               closeConnection = true) {\n        const client = new pg.Client({\n                user,\n                password,\n                host,\n                database,\n                port,\n            }\n        )\n\n        client.connect();\n        \n        await setAGETypes(client, types);\n        if (closeConnection === true) {\n            await client.end();\n        }\n        return client;\n    }\n    */\n    async connect(){\n        if (!this._pool) {\n            this._pool = GraphRepository.newConnectionPool(this.getPoolConnectionInfo());\n        }\n        const client = await this._pool.connect();\n        if (!this._server_version){\n            const {server_version: v} = await onConnectQueries(client);\n            this._server_version = v;\n        }\n\n        return client;\n    }\n\n    static newConnectionPool(poolConnectionConfig) {\n        return new pg.Pool(poolConnectionConfig);\n    }\n\n    // Execute cypher query with params\n    async execute(query, params = []) {\n        let client = await this.getConnection();\n        let result = null;\n        try {\n            result = await client.query(query, params);\n        } catch (err) {\n            throw err;\n        } finally {\n            client.release();\n        }\n        return result;\n    }\n\n    async createTransaction(){\n        const client = await this.getConnection();\n        return [client, async (query, params=[])=>{\n            return [await client.query(query, params), client];\n        }]\n    }\n\n    async initGraphNames(){\n        const { rows } = await this.execute(getQuery('get_graph_names'));\n        this._graphs = rows.map((item)=>item.name);\n        // set current graph to first name\n        this.setCurrentGraph(this._graphs[0]);\n    }\n    \n    /**\n     * Get connectionInfo\n     */\n    async getConnection() {\n\n        const client = await this._pool.connect();\n\n        await setAGETypes(client, types);\n\n        return client;\n    }\n\n    /**\n     * Release connection\n     */\n    async releaseConnection() {\n        try {\n            await this._pool.end();\n            return true;\n        } catch (err) {\n            throw err;\n        }\n    }\n\n    /**\n     * Get connection pool information\n     */\n    getPoolConnectionInfo() {\n        if (!this._host || !this._port || !this._database) {\n            return null;\n        }\n        const config = {\n            host: this._host,\n            port: this._port,\n            database: this._database,\n            version: this._server_version,\n            user: this._user,\n            password: this._password,\n            max: PgConfig.max,\n            idleTimeoutMillis: PgConfig.idleTimeoutMillis,\n            connectionTimeoutMillis: PgConfig.connectionTimeoutMillis,\n        };\n        \n        if (this._ssl) {\n            config.ssl = this._ssl;\n        }\n        \n        return config;\n    }\n\n    /**\n     * Get connection info\n     */\n    getConnectionInfo() {\n        if (!this._host || !this._port || !this._database) {\n            throw new Error(\"Not connected\");\n        }\n        return {\n            host: this._host,\n            version: this._server_version,\n            port: this._port,\n            database: this._database,\n            user: this._user,\n            password: this._password,\n            graphs: this._graphs,\n            graph: this._graph,\n        };\n    }\n\n    setCurrentGraph(name){\n        this._graph = name;\n    }\n}\n\nmodule.exports = GraphRepository;\n"],"mappings":"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","ignoreList":[]}