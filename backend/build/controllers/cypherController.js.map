{"version":3,"file":"cypherController.js","names":["CypherService","require","sessionService","GraphCreator","CypherController","_classCallCheck2","_createClass2","key","value","_executeCypher","_asyncToGenerator2","_regenerator","mark","_callee","req","res","connectorService","cypherService","data","wrap","_context","prev","next","get","sessionID","isConnected","graphRepository","executeCypher","body","cmd","sent","status","json","end","Error","stop","_x","_x2","apply","arguments","_createGraph","_callee5","db","_yield$db$graphReposi","_yield$db$graphReposi2","client","transaction","graph","DROP","CREATE","details","err","_t","_t2","_context5","createTransaction","_slicedToArray2","nodes","files","edges","graphName","dropGraph","parseData","query","drop","create","code","Promise","all","labels","map","_ref","_callee2","q","_context2","abrupt","_x6","_ref2","_callee3","_context3","_x7","_ref3","_callee4","_context4","_x8","toString","_objectSpread","release","finish","createGraph","_x3","_x4","_x5","module","exports"],"sources":["../../src/controllers/cypherController.js"],"sourcesContent":["/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nconst CypherService = require(\"../services/cypherService\");\nconst sessionService = require(\"../services/sessionService\");\nconst GraphCreator = require(\"../models/GraphCreator\");\n\nclass CypherController {\n    async executeCypher(req, res) {\n        let connectorService = sessionService.get(req.sessionID);\n        if (connectorService.isConnected()) {\n            let cypherService = new CypherService(\n                connectorService.graphRepository\n            );\n            let data = await cypherService.executeCypher(req.body.cmd);\n            res.status(200).json(data).end();\n        } else {\n            throw new Error(\"Not connected\");\n        }\n    }\n\n    async createGraph(req, res, next) {\n        let db = sessionService.get(req.sessionID);\n        if (db.isConnected()){\n            let [client, transaction] = await db.graphRepository.createTransaction();\n            try {\n                let graph = new GraphCreator({\n                    nodes: req.files.nodes,\n                    edges: req.files.edges,\n                    graphName: req.body.graphName,\n                    dropGraph: req.body.dropGraph === 'true'\n                });\n                \n                await graph.parseData();\n                const DROP = graph.query.graph.drop;\n                const CREATE = graph.query.graph.create;\n                if (DROP){\n                    try{\n                       await client.query(DROP);\n                    }catch(e){\n                        if(e.code !== '3F000') throw e;\n                    }\n                    \n                }\n                await client.query(CREATE);\n                await transaction('BEGIN');\n                await Promise.all(graph.query.labels.map(async (q)=>{\n                    return await transaction(q);\n                }));\n                await Promise.all(graph.query.nodes.map(async (q)=>{\n                    return await transaction(q);\n                }));\n                await Promise.all(graph.query.edges.map(async (q)=>{\n                    return await transaction(q);\n                }));\n                await transaction('COMMIT');\n                res.status(204).end();\n            } catch (e){\n                await transaction('ROLLBACK');\n                const details = e.toString();\n                const err = {\n                    ...e,\n                    details\n                }\n                res.status(500).json(err).end();\n            }finally{\n                client.release();\n            }\n\n        }\n    }\n}\n\nmodule.exports = CypherController;\n"],"mappings":"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","ignoreList":[]}