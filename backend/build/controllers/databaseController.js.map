{"version":3,"file":"databaseController.js","names":["sessionService","require","winston","DatabaseController","_classCallCheck2","_createClass2","key","value","_connectDatabase","_asyncToGenerator2","_regenerator","mark","_callee","req","res","next","databaseService","connectionInfo","wrap","_context","prev","get","sessionID","isConnected","connectDatabase","body","getConnectionInfo","status","json","end","stop","_x","_x2","_x3","apply","arguments","_disconnectDatabase","_callee2","isDisconnect","_context2","disconnectDatabase","sent","msg","Error","_x4","_x5","_x6","_getStatus","_callee3","_context3","getConnectionStatus","getStatus","_x7","_x8","_x9","_getMetadata","_callee4","metadata","_context4","getMetaData","getMetadata","_x0","_x1","_x10","module","exports"],"sources":["../../src/controllers/databaseController.js"],"sourcesContent":["/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nconst sessionService = require('../services/sessionService');\nconst winston = require('winston');\n\nclass DatabaseController {\n\n    async connectDatabase(req, res, next) {\n        let databaseService = sessionService.get(req.sessionID);\n        if (!databaseService.isConnected()) {\n            await databaseService.connectDatabase(req.body);\n        }\n        const connectionInfo = databaseService.getConnectionInfo();\n        res.status(200).json(connectionInfo).end();\n    }\n\n    async disconnectDatabase(req, res, next) {\n        let databaseService = sessionService.get(req.sessionID);\n        if (databaseService.isConnected()) {\n            let isDisconnect = await databaseService.disconnectDatabase();\n\n            if (isDisconnect) {\n                res.status(200).json({msg: 'Disconnect Successful'}).end();\n            } else {\n                res.status(500).json({msg: 'Already Disconnected'}).end();\n            }\n        } else {\n            throw new Error('Not connected');\n        }\n    }\n\n    async getStatus(req, res, next) {\n        let databaseService = sessionService.get(req.sessionID);\n        if (databaseService.isConnected()) {\n            await databaseService.getConnectionStatus();\n            res.status(200).json(databaseService.getConnectionInfo()).end();\n        } else {\n            throw new Error('Not connected');\n        }\n    }\n\n    async getMetadata(req, res, next) {\n        let databaseService = sessionService.get(req.sessionID);\n        if (databaseService.isConnected()) {\n            let metadata = await databaseService.getMetaData(req.body);\n            res.status(200).json(metadata).end();\n        } else {\n            throw new Error('Not connected');\n        }\n    }\n    /*\n    async getMetaChart(req, res, next) {\n        let databaseService = sessionService.get(req.sessionID);\n        if (databaseService.isConnected()) {\n            let metadata = [];\n            try {\n                let graphLabels = await databaseService.getGraphLabels();\n                for (let labels of graphLabels) {\n                    let countResults = await databaseService.getGraphLabelCount(labels.la_name, labels.la_kind)\n                    for (let idx in countResults) {\n                        if (idx > 0) {\n                            labels.la_name = labels.la_name + \"-\" + idx\n                            labels.la_oid = labels.la_oid + (idx * 0.1)\n                        }\n                        metadata.push(Object.assign({}, labels, countResults[idx]))\n                    }\n                }\n                res.status(200).json(metadata).end();\n            } catch (error) {\n                res.status(500).json(metadata).end();\n            }\n        } else {\n            throw new Error('Not connected');\n        }\n    }*/\n}\n\nmodule.exports = DatabaseController;\n"],"mappings":"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","ignoreList":[]}