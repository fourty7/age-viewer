{"version":3,"file":"AgtypeListener.js","names":["_antlr","_interopRequireDefault","require","_callSuper","t","o","e","_getPrototypeOf2","_possibleConstructorReturn2","_isNativeReflectConstruct","Reflect","construct","constructor","apply","Boolean","prototype","valueOf","call","AgtypeListener","exports","_antlr4$tree$ParseTre","_classCallCheck2","arguments","_inherits2","_createClass2","key","value","enterAgType","ctx","exitAgType","enterAgValue","exitAgValue","enterStringValue","exitStringValue","enterIntegerValue","exitIntegerValue","enterFloatValue","exitFloatValue","enterTrueBoolean","exitTrueBoolean","enterFalseBoolean","exitFalseBoolean","enterNullValue","exitNullValue","enterObjectValue","exitObjectValue","enterArrayValue","exitArrayValue","enterObj","exitObj","enterPair","exitPair","enterArray","exitArray","enterTypeAnnotation","exitTypeAnnotation","enterFloatLiteral","exitFloatLiteral","antlr4","tree","ParseTreeListener"],"sources":["../../src/tools/AgtypeListener.js"],"sourcesContent":["/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n// Generated from src/tools/Agtype.g4 by ANTLR 4.9.2\n// jshint ignore: start\nimport antlr4 from 'antlr4';\n\n// This class defines a complete listener for a parse tree produced by AgtypeParser.\nexport default class AgtypeListener extends antlr4.tree.ParseTreeListener {\n\n    // Enter a parse tree produced by AgtypeParser#agType.\n    enterAgType(ctx) {\n    }\n\n    // Exit a parse tree produced by AgtypeParser#agType.\n    exitAgType(ctx) {\n    }\n\n\n    // Enter a parse tree produced by AgtypeParser#agValue.\n    enterAgValue(ctx) {\n    }\n\n    // Exit a parse tree produced by AgtypeParser#agValue.\n    exitAgValue(ctx) {\n    }\n\n\n    // Enter a parse tree produced by AgtypeParser#StringValue.\n    enterStringValue(ctx) {\n    }\n\n    // Exit a parse tree produced by AgtypeParser#StringValue.\n    exitStringValue(ctx) {\n    }\n\n\n    // Enter a parse tree produced by AgtypeParser#IntegerValue.\n    enterIntegerValue(ctx) {\n    }\n\n    // Exit a parse tree produced by AgtypeParser#IntegerValue.\n    exitIntegerValue(ctx) {\n    }\n\n\n    // Enter a parse tree produced by AgtypeParser#FloatValue.\n    enterFloatValue(ctx) {\n    }\n\n    // Exit a parse tree produced by AgtypeParser#FloatValue.\n    exitFloatValue(ctx) {\n    }\n\n\n    // Enter a parse tree produced by AgtypeParser#TrueBoolean.\n    enterTrueBoolean(ctx) {\n    }\n\n    // Exit a parse tree produced by AgtypeParser#TrueBoolean.\n    exitTrueBoolean(ctx) {\n    }\n\n\n    // Enter a parse tree produced by AgtypeParser#FalseBoolean.\n    enterFalseBoolean(ctx) {\n    }\n\n    // Exit a parse tree produced by AgtypeParser#FalseBoolean.\n    exitFalseBoolean(ctx) {\n    }\n\n\n    // Enter a parse tree produced by AgtypeParser#NullValue.\n    enterNullValue(ctx) {\n    }\n\n    // Exit a parse tree produced by AgtypeParser#NullValue.\n    exitNullValue(ctx) {\n    }\n\n\n    // Enter a parse tree produced by AgtypeParser#ObjectValue.\n    enterObjectValue(ctx) {\n    }\n\n    // Exit a parse tree produced by AgtypeParser#ObjectValue.\n    exitObjectValue(ctx) {\n    }\n\n\n    // Enter a parse tree produced by AgtypeParser#ArrayValue.\n    enterArrayValue(ctx) {\n    }\n\n    // Exit a parse tree produced by AgtypeParser#ArrayValue.\n    exitArrayValue(ctx) {\n    }\n\n\n    // Enter a parse tree produced by AgtypeParser#obj.\n    enterObj(ctx) {\n    }\n\n    // Exit a parse tree produced by AgtypeParser#obj.\n    exitObj(ctx) {\n    }\n\n\n    // Enter a parse tree produced by AgtypeParser#pair.\n    enterPair(ctx) {\n    }\n\n    // Exit a parse tree produced by AgtypeParser#pair.\n    exitPair(ctx) {\n    }\n\n\n    // Enter a parse tree produced by AgtypeParser#array.\n    enterArray(ctx) {\n    }\n\n    // Exit a parse tree produced by AgtypeParser#array.\n    exitArray(ctx) {\n    }\n\n\n    // Enter a parse tree produced by AgtypeParser#typeAnnotation.\n    enterTypeAnnotation(ctx) {\n    }\n\n    // Exit a parse tree produced by AgtypeParser#typeAnnotation.\n    exitTypeAnnotation(ctx) {\n    }\n\n\n    // Enter a parse tree produced by AgtypeParser#floatLiteral.\n    enterFloatLiteral(ctx) {\n    }\n\n    // Exit a parse tree produced by AgtypeParser#floatLiteral.\n    exitFloatLiteral(ctx) {\n    }\n\n}\n"],"mappings":"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","ignoreList":[]}