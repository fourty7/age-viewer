{"version":3,"file":"databaseService.js","names":["_SQLFlavorManager","require","util","_interopRequireWildcard","_GraphRepository","_interopRequireDefault","_repl","_http","e","t","WeakMap","r","n","__esModule","o","i","f","__proto__","_typeof","has","get","set","_t5","hasOwnProperty","call","Object","defineProperty","getOwnPropertyDescriptor","DatabaseService","_classCallCheck2","_graphRepository","_createClass2","key","value","_getMetaData","_asyncToGenerator2","_regenerator","mark","_callee","graphName","gr","_gr$getConnectionInfo","graphs","wrap","_context","prev","next","initGraphNames","getConnectionInfo","analyzeGraph","includes","currentGraph","getMetaDataSingle","abrupt","sent","_graph","length","graphNameInitialize","Error","stop","getMetaData","_x","apply","arguments","_getMetaDataSingle","_callee2","curGraph","metadata","data","_this$getConnectionIn","database","_yield$this$readMetaD","nodes","edges","_t","_context2","readMetaData","getPropertyKeys","propertyKeys","graph","getRole","role","forEach","gname","_x2","_x3","_graphNameInitialize","_callee3","_context3","_x4","_getGraphLabels","_callee4","graphRepository","queryResult","_t2","_context4","execute","getQuery","rows","getGraphLabels","_getGraphLabelCount","_callee5","labelName","labelKind","query","_context5","format","concat","getGraphLabelCount","_x5","_x6","_readMetaData","_callee6","_gr$getConnectionInfo2","version","_context6","split","parseMeta","_x7","_getPropertyKeys","_callee7","_context7","_getRole","_callee8","_context8","user","_connectDatabase","_callee9","connectionInfo","client","_t3","_context9","GraphRepository","connect","release","connectDatabase","_x8","_disconnectDatabase","_callee0","isRelease","_context0","console","log","releaseConnection","disconnectDatabase","_getConnectionStatus","_callee1","_t4","_context1","getConnection","getConnectionStatus","isConnected","convertEdge","_ref","label","id","start","end","props","oid","properties","meta","vertex_name","edge_name","element","index","name","kind","push","_analyzeGraph","_callee10","_context10","_x9","module","exports"],"sources":["../../src/services/databaseService.js"],"sourcesContent":["/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport { getQuery } from \"../tools/SQLFlavorManager\";\nimport * as util from \"util\";\nimport GraphRepository from '../models/GraphRepository';\nimport { start } from \"repl\";\nimport { get } from \"http\";\n\nclass DatabaseService {\n    constructor() {\n        this._graphRepository = null;\n    }\n\n    async getMetaData(graphName) {\n        let gr = this._graphRepository;\n        await gr.initGraphNames();\n        const { graphs } = gr.getConnectionInfo();\n        await DatabaseService.analyzeGraph(gr);\n        if (graphName) {\n            if (graphs.includes(graphName.currentGraph)) {\n                return await this.getMetaDataSingle(graphName.currentGraph, graphs);\n            } else {\n                return await this.getMetaDataSingle(gr._graph, graphs);\n            }\n        } else if (graphs.length > 0) {\n            return await this.graphNameInitialize(graphs);\n        } else {\n            throw new Error('graph does not exist');\n            // return await this.getMetaDataMultiple(graphs);\n        }\n    }\n\n    // async getMetaDataMultiple(graphs){\n    //     const metadata = {};\n    //     await Promise.all(graphs.map(async(gname)=>{\n    //         metadata[gname] = await this.getMetaDataSingle(gname);\n    //     }))\n    //     return metadata;\n    // }\n\n    async getMetaDataSingle(curGraph, graphs) {\n        let metadata = {};\n        let data = {};\n        const { database } = this.getConnectionInfo();\n        try {\n            let { nodes, edges } = await this.readMetaData(curGraph);\n            data.nodes = nodes;\n            data.edges = edges;\n            data.propertyKeys = await this.getPropertyKeys();\n            data.graph = curGraph;\n            data.database = database;\n            data.role = await this.getRole();\n            graphs.forEach((gname) => {\n                if (gname !== curGraph) metadata[gname] = {};\n                else metadata[gname] = data;\n            })\n        } catch (error) {\n            throw error;\n        }\n        return metadata;\n    }\n\n    async graphNameInitialize(graphs) {\n        let metadata = {};\n        graphs.forEach((gname) => {\n            metadata[gname] = {};\n        })\n        return metadata;\n    }\n\n    async getGraphLabels() {\n        let graphRepository = this._graphRepository;\n        let queryResult = {};\n        try {\n            queryResult = await graphRepository.execute(getQuery('graph_labels'), [this.getConnectionInfo().graph]);\n        } catch (error) {\n            throw error;\n        }\n\n        return queryResult.rows;\n    }\n\n    async getGraphLabelCount(labelName, labelKind) {\n        let graphRepository = this._graphRepository;\n        let query = null;\n\n        if (labelKind === 'v') {\n            query = util.format(getQuery('label_count_vertex'), `${this.getConnectionInfo().graph}.${labelName}`);\n        } else if (labelKind === 'e') {\n            query = util.format(getQuery('label_count_edge'), `${this.getConnectionInfo().graph}.${labelName}`);\n        }\n\n        let queryResult = await graphRepository.execute(query);\n\n        return queryResult.rows;\n    }\n\n    static async analyzeGraph(gr) {\n        await gr.execute(getQuery('analyze_graph'));\n    }\n\n    async readMetaData(graphName) {\n        let gr = this._graphRepository;\n        const { version } = gr.getConnectionInfo();\n        let queryResult = await gr.execute(util.format(getQuery('meta_data', version.split('.')[0]), graphName));\n        return this.parseMeta(queryResult.rows);\n    }\n\n    async getPropertyKeys() {\n        let graphRepository = this._graphRepository;\n        let queryResult = await graphRepository.execute(getQuery('property_keys'));\n        return queryResult.rows;\n    }\n\n    async getRole() {\n        let graphRepository = this._graphRepository;\n        let queryResult = await graphRepository.execute(getQuery('get_role'), [this.getConnectionInfo().user]);\n        return queryResult.rows[0];\n    }\n\n    async connectDatabase(connectionInfo) {\n        let graphRepository = this._graphRepository;\n        if (graphRepository == null) {\n            this._graphRepository = new GraphRepository(connectionInfo);\n            graphRepository = this._graphRepository;\n        }\n\n        try {\n            let client = await graphRepository.connect();\n            client.release();\n        } catch (e) {\n            this._graphRepository = null;\n            throw e;\n        }\n        return true;\n    }\n\n    async disconnectDatabase() {\n        let graphRepository = this._graphRepository;\n        if (graphRepository == null) {\n            console.log('Already Disconnected');\n            return false;\n        } else {\n            let isRelease = await this._graphRepository.releaseConnection();\n            if (isRelease) {\n                this._graphRepository = null;\n                return true;\n            } else {\n                console.log('Failed releaseConnection()');\n                return false;\n            }\n        }\n    }\n\n    async getConnectionStatus() {\n        let graphRepository = this._graphRepository;\n        if (graphRepository == null) {\n            return false;\n        }\n\n        try {\n            let client = await graphRepository.getConnection();\n            client.release();\n        } catch (err) {\n            return false;\n        }\n        return true;\n    }\n\n    getConnectionInfo() {\n        if (this.isConnected() === false)\n            throw new Error(\"Not connected\");\n        return this._graphRepository.getConnectionInfo();\n    }\n\n    isConnected() {\n        return this._graphRepository != null;\n    }\n\n    get graphRepository() {\n        return this._graphRepository;\n    }\n\n    convertEdge({ label, id, start, end, props }) {\n        return {\n            label: label,\n            id: `${id.oid}.${id.id}`,\n            start: `${start.oid}.${start.id}`,\n            end: `${end.oid}.${end.id}`,\n            properties: props,\n        };\n    }\n    parseMeta(data) {\n        const meta = {\n            edges: [],\n            nodes: []\n        };\n        const vertex_name = '_ag_label_vertex';\n        const edge_name = '_ag_label_edge';\n\n        data.forEach((element, index) => {\n            if (element.name === vertex_name || element.name === edge_name) {\n                return;\n            }\n\n            if (element.kind === 'v') meta.nodes.push(element);\n            if (element.kind === 'e') meta.edges.push(element);\n        });\n        return meta;\n    }\n}\n\nmodule.exports = DatabaseService;"],"mappings":"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","ignoreList":[]}